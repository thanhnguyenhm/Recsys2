{"ast":null,"code":"import _slicedToArray from \"/Users/thanhnguyen/Library/Mobile Documents/com~apple~CloudDocs/CSU/SJSU/CS160/Workspace/Recsys_new/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thanhnguyen/Library/Mobile Documents/com~apple~CloudDocs/CSU/SJSU/CS160/Workspace/Recsys_new/frontend/src/components/RatedMovies.js\";\nimport MovieModule from \"./MovieModule\";\nimport React, { useEffect, useState } from \"react\";\nimport jwt_decode from 'jwt-decode';\n\nfunction RatedMovies() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        movies = _useState2[0],\n        setMovies = _useState2[1];\n\n  const token = localStorage.usertoken;\n  const decoded = jwt_decode(token);\n  const user = decoded.identity.username;\n  const url = \"/rated_movies/\" + user;\n  console.log(url);\n  useEffect(() => {\n    fetch(url).then(response => response.json().then(data => {\n      setMovies(data.movies);\n    }));\n  }, []);\n  var arr = [];\n\n  for (var i = 0; i < movies.length; i++) {\n    let movie = {\n      id: i,\n      title: movies[i].title,\n      poster: movies[i].poster_path,\n      rating: movies[i].rating\n    };\n    arr.push(movie);\n  } // TODO: Need to auto refresh rated movies if users change ratings\n\n\n  return arr.map(movie => React.createElement(MovieModule, {\n    key: movie.id,\n    movie: movie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n}\n\nexport default RatedMovies;","map":{"version":3,"sources":["/Users/thanhnguyen/Library/Mobile Documents/com~apple~CloudDocs/CSU/SJSU/CS160/Workspace/Recsys_new/frontend/src/components/RatedMovies.js"],"names":["MovieModule","React","useEffect","useState","jwt_decode","RatedMovies","movies","setMovies","token","localStorage","usertoken","decoded","user","identity","username","url","console","log","fetch","then","response","json","data","arr","i","length","movie","id","title","poster","poster_path","rating","push","map"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,SAASC,WAAT,GAAuB;AAAA,oBACSF,QAAQ,CAAC,EAAD,CADjB;AAAA;AAAA,QACZG,MADY;AAAA,QACJC,SADI;;AAEnB,QAAMC,KAAK,GAAGC,YAAY,CAACC,SAA3B;AACA,QAAMC,OAAO,GAAGP,UAAU,CAACI,KAAD,CAA1B;AACA,QAAMI,IAAI,GAAGD,OAAO,CAACE,QAAR,CAAiBC,QAA9B;AACA,QAAMC,GAAG,GAAG,mBAAmBH,IAA/B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,KAAK,CAACH,GAAD,CAAL,CAAWI,IAAX,CAAgBC,QAAQ,IACpBA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBG,IAAI,IAAI;AACzBf,MAAAA,SAAS,CAACe,IAAI,CAAChB,MAAN,CAAT;AACH,KAFD,CADJ;AAKH,GANQ,EAMN,EANM,CAAT;AAQA,MAAIiB,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,MAAM,CAACmB,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,QAAIE,KAAK,GAAG;AACRC,MAAAA,EAAE,EAAEH,CADI;AAERI,MAAAA,KAAK,EAAEtB,MAAM,CAACkB,CAAD,CAAN,CAAUI,KAFT;AAGRC,MAAAA,MAAM,EAAEvB,MAAM,CAACkB,CAAD,CAAN,CAAUM,WAHV;AAIRC,MAAAA,MAAM,EAAEzB,MAAM,CAACkB,CAAD,CAAN,CAAUO;AAJV,KAAZ;AAMAR,IAAAA,GAAG,CAACS,IAAJ,CAASN,KAAT;AACH,GA1BkB,CA4BnB;;;AACA,SAAOH,GAAG,CAACU,GAAJ,CAASP,KAAD,IACX,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEA,KAAK,CAACC,EAAxB;AAA4B,IAAA,KAAK,EAAED,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAGH;;AAED,eAAerB,WAAf","sourcesContent":["import MovieModule from \"./MovieModule\";\nimport React, { useEffect, useState } from \"react\";\nimport jwt_decode from 'jwt-decode'\n\nfunction RatedMovies() {\n    const [movies, setMovies] = useState([]);\n    const token = localStorage.usertoken\n    const decoded = jwt_decode(token)\n    const user = decoded.identity.username;\n    const url = \"/rated_movies/\" + user\n    console.log(url)\n\n    useEffect(() => {\n        fetch(url).then(response =>\n            response.json().then(data => {\n                setMovies(data.movies);\n            })\n        );\n    }, []);\n\n    var arr = [];\n \n    for (var i = 0; i < movies.length; i++) {\n        let movie = {\n            id: i,\n            title: movies[i].title,\n            poster: movies[i].poster_path,\n            rating: movies[i].rating\n        };\n        arr.push(movie);\n    }\n\n    // TODO: Need to auto refresh rated movies if users change ratings\n    return arr.map((movie) => (\n        <MovieModule key={movie.id} movie={movie} />\n    ));\n}\n\nexport default RatedMovies;"]},"metadata":{},"sourceType":"module"}