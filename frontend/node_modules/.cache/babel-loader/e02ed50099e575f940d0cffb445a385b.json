{"ast":null,"code":"import _slicedToArray from \"/Users/thanhnguyen/Library/Mobile Documents/com~apple~CloudDocs/CSU/SJSU/CS160/Workspace/Recsys_new/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thanhnguyen/Library/Mobile Documents/com~apple~CloudDocs/CSU/SJSU/CS160/Workspace/Recsys_new/frontend/src/components/RatedMovies.js\";\nimport MovieModule from \"./MovieModule\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction RatedMovies() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        movies = _useState2[0],\n        setMovies = _useState2[1];\n\n  useEffect(() => {\n    fetch(\"/rated_movies\").then(response => response.json().then(data => {\n      setMovies(data.movies);\n    }));\n  }, []);\n  var arr = [];\n  var i = 0;\n  movies.map(e => {\n    let movie = {\n      id: i,\n      title: e.title,\n      poster: e.poster_path,\n      rating: e.rating\n    };\n    arr.push(movie);\n    i++;\n  }); // TODO: Need to auto refresh rated movies if users change ratings\n\n  return arr.map(movie => React.createElement(MovieModule, {\n    key: movie.id,\n    movie: movie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n}\n\nexport default RatedMovies;","map":{"version":3,"sources":["/Users/thanhnguyen/Library/Mobile Documents/com~apple~CloudDocs/CSU/SJSU/CS160/Workspace/Recsys_new/frontend/src/components/RatedMovies.js"],"names":["MovieModule","React","useEffect","useState","RatedMovies","movies","setMovies","fetch","then","response","json","data","arr","i","map","e","movie","id","title","poster","poster_path","rating","push"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,WAAT,GAAuB;AAAA,oBACSD,QAAQ,CAAC,EAAD,CADjB;AAAA;AAAA,QACZE,MADY;AAAA,QACJC,SADI;;AAGnBJ,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,KAAK,CAAC,eAAD,CAAL,CAAuBC,IAAvB,CAA4BC,QAAQ,IAChCA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBG,IAAI,IAAI;AACzBL,MAAAA,SAAS,CAACK,IAAI,CAACN,MAAN,CAAT;AACH,KAFD,CADJ;AAKH,GANQ,EAMN,EANM,CAAT;AAQA,MAAIO,GAAG,GAAG,EAAV;AACA,MAAIC,CAAC,GAAG,CAAR;AAEAR,EAAAA,MAAM,CAACS,GAAP,CAAWC,CAAC,IAAI;AACZ,QAAIC,KAAK,GAAG;AACRC,MAAAA,EAAE,EAAEJ,CADI;AAERK,MAAAA,KAAK,EAAEH,CAAC,CAACG,KAFD;AAGRC,MAAAA,MAAM,EAAEJ,CAAC,CAACK,WAHF;AAIRC,MAAAA,MAAM,EAAEN,CAAC,CAACM;AAJF,KAAZ;AAMAT,IAAAA,GAAG,CAACU,IAAJ,CAASN,KAAT;AACAH,IAAAA,CAAC;AACJ,GATD,EAdmB,CAyBnB;;AACA,SAAOD,GAAG,CAACE,GAAJ,CAASE,KAAD,IACX,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEA,KAAK,CAACC,EAAxB;AAA4B,IAAA,KAAK,EAAED,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAGH;;AAED,eAAeZ,WAAf","sourcesContent":["import MovieModule from \"./MovieModule\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction RatedMovies() {\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        fetch(\"/rated_movies\").then(response =>\n            response.json().then(data => {\n                setMovies(data.movies);\n            })\n        );\n    }, []);\n\n    var arr = [];\n    var i = 0;\n\n    movies.map(e => {\n        let movie = {\n            id: i,\n            title: e.title,\n            poster: e.poster_path,\n            rating: e.rating\n        };\n        arr.push(movie);\n        i++;\n    })\n\n    // TODO: Need to auto refresh rated movies if users change ratings\n    return arr.map((movie) => (\n        <MovieModule key={movie.id} movie={movie} />\n    ));\n}\n\nexport default RatedMovies;"]},"metadata":{},"sourceType":"module"}